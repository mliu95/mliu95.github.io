<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liucode</title>
  <subtitle>A blog by Michael Liu</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mliu95.github.io/"/>
  <updated>2016-08-10T18:36:40.103Z</updated>
  <id>http://mliu95.github.io/</id>
  
  <author>
    <name>Michael Liu</name>
    <email>hello@michaelyliu.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>On Friendship</title>
    <link href="http://mliu95.github.io/2016/08/10/On-Friendship/"/>
    <id>http://mliu95.github.io/2016/08/10/On-Friendship/</id>
    <published>2016-08-10T06:03:14.000Z</published>
    <updated>2016-08-10T18:36:40.103Z</updated>
    
    <content type="html"><![CDATA[<p>I finished the last week of my summer internship at Facebook last Friday. I can’t help but feel nostalgic and sad that another chapter in my life is coming to a close. My housing complex that up until recently had been full of new friends I had made now seems eerily still. I’m one of the last ones to leave for home. My thoughts drift. <em>How long will it be until I see these friends once more? Which friends will I never get to cross paths with again?</em></p>
<p>These feelings are all but uncommon to me. In each of my previous internships and school years I’ve felt these pangs of bittersweet. <em>I wish my internship was longer. I wish this small, ephemeral portion of my life could last. I wish these people didn’t have to graduate and move away.</em> Perhaps this is all a lesson in growing up. Maybe it’s to show us that, <em>“Hey, you can find happiness no matter where you go, so don’t be afraid to leave this behind.”</em></p>
<p>Yesterday evening I went up to the city for a spontaneous picnic and catch-up session with a childhood friend. I tried to toss my apple cider into the trash can but missed, spilling onto our shoes instead. We doubled over in laughter at how ridiculous I looked. While tears came out my eyes and my abs ached, I slowly realized: <em>holy shit, this is awesome.</em> I felt more like an adult every day, but in that moment I knew that some of my friendships would last forever. Here we were 3,000 miles from home yet it felt like nothing had changed. On my ride home I messaged my friend to let him know much I appreciated him. That inspired me to write this post for all my friends.</p>
<p>Regardless of how short I’ve known you, I want to make it known just how greatly I value the kickass friendships I’ve made over the years. You guys brighten my life and challenge me to be a better person every day. I’m happy to have friendships worth missing.</p>
<img src="/2016/08/10/On-Friendship/friends.jpg" alt="I have no idea how this position came to be" title="I have no idea how this position came to be">
<p>– Michael</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I finished the last week of my summer internship at Facebook last Friday. I can’t help but feel nostalgic and sad that another chapter in
    
    </summary>
    
    
      <category term="Life" scheme="http://mliu95.github.io/tags/Life/"/>
    
      <category term="Friendship" scheme="http://mliu95.github.io/tags/Friendship/"/>
    
  </entry>
  
  <entry>
    <title>Pennapps 2015</title>
    <link href="http://mliu95.github.io/2015/01/24/Pennapps-2015/"/>
    <id>http://mliu95.github.io/2015/01/24/Pennapps-2015/</id>
    <published>2015-01-24T21:42:14.000Z</published>
    <updated>2016-08-10T08:59:13.731Z</updated>
    
    <content type="html"><![CDATA[<p>(Note: This has been sitting in my drafts for too long, decided releasing it later was better than never doing it at all)</p>
<p>This last weekend I went to UPenn to participate in the 2015 Pennapps hackathon with another friend. Going into the event, we had no idea of what we wanted to build and little experience with the hardware we picked up. After brainstorming for a few hours, we decided to make a virtual reality Fruit Ninja game using the Oculus Rift and a Myo. 48 hours later, while giving a demo of our game to over a thousand people, we ran into one of my most dreaded fears: technical difficulties.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/ur1SwEgUEVE" frameborder="0" allowfullscreen></iframe></div>
<p>In the end the moment of sheer panic was worth it, we ended up taking third place. Unfortunately, not owning a Myo and Oculus Rift leave me unable to continue working on the game. If you want a copy of the code, shoot me an email @ <a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#104;&#x65;&#108;&#108;&#111;&#64;&#x6d;&#105;&#x63;&#104;&#97;&#x65;&#x6c;&#x79;&#108;&#105;&#x75;&#46;&#99;&#x6f;&#109;">&#104;&#x65;&#108;&#108;&#111;&#64;&#x6d;&#105;&#x63;&#104;&#97;&#x65;&#x6c;&#x79;&#108;&#105;&#x75;&#46;&#99;&#x6f;&#109;</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(Note: This has been sitting in my drafts for too long, decided releasing it later was better than never doing it at all)&lt;/p&gt;
&lt;p&gt;This las
    
    </summary>
    
    
      <category term="Myo" scheme="http://mliu95.github.io/tags/Myo/"/>
    
      <category term="Unity" scheme="http://mliu95.github.io/tags/Unity/"/>
    
      <category term="Pennapps" scheme="http://mliu95.github.io/tags/Pennapps/"/>
    
      <category term="Oculus Rift" scheme="http://mliu95.github.io/tags/Oculus-Rift/"/>
    
  </entry>
  
  <entry>
    <title>Creating an online multiplayer web game using Socket.io and Quintus Part 3</title>
    <link href="http://mliu95.github.io/2014/11/14/Creating-an-online-multiplayer-web-game-using-Socketio-and-Quintus-Part3/"/>
    <id>http://mliu95.github.io/2014/11/14/Creating-an-online-multiplayer-web-game-using-Socketio-and-Quintus-Part3/</id>
    <published>2014-11-15T00:52:38.000Z</published>
    <updated>2016-08-10T08:59:13.663Z</updated>
    
    <content type="html"><![CDATA[<p>Here’s a quick demo of our finished game:</p>
<iframe style="width:98%;" height="500" src="http://104.167.115.218:8080/" allowfullscreen></iframe>

<p><a href="http://mliu95.github.io/2014/09/16/Creating-an-online-multiplayer-web-game-using-Socketio-and-Quintus-Part2">Last post</a>, I showed up how to set up basic Socketio interaction with Quintus to allow for multiple people to join a game of tag. Now, let’s work on the final part of our app, which is adding the code to let our players tag each other.</p>
<h2 id="Player-Class"><a href="#Player-Class" class="headerlink" title="Player Class"></a>Player Class</h2><p>Let’s add some properties and event listeners to our player class</p>
<figure class="highlight javascript"><figcaption><span>player.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">Q.Sprite.extend(<span class="string">'Player'</span>, &#123;</div><div class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>._super(p, &#123;</div><div class="line">        sheet: <span class="string">'player'</span>,</div><div class="line">        tagged: <span class="literal">false</span>,</div><div class="line">        invincible: <span class="literal">false</span>,</div><div class="line">        vyMult: <span class="number">1</span></div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">this</span>.add(<span class="string">'2d, platformerControls, animation'</span>);</div><div class="line"> </div><div class="line">      <span class="keyword">this</span>.addEventListeners();</div><div class="line">    &#125;,</div><div class="line">    addEventListeners: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.on(<span class="string">'hit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">collision</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.p.tagged &amp;&amp; collision.obj.isA(<span class="string">'Actor'</span>) &amp;&amp; !collision.obj.p.tagged &amp;&amp; !collision.obj.p.invincible) &#123;</div><div class="line">          <span class="keyword">this</span>.p.socket.emit(<span class="string">'tag'</span>, &#123; playerId: collision.obj.p.playerId &#125;);</div><div class="line">          <span class="keyword">this</span>.p.tagged = <span class="literal">false</span>;</div><div class="line">          <span class="keyword">this</span>.p.sheet = <span class="string">'player'</span>;</div><div class="line">          <span class="keyword">this</span>.p.invincible = <span class="literal">true</span>;</div><div class="line">          <span class="keyword">this</span>.p.opacity = <span class="number">0.5</span>;</div><div class="line">          <span class="keyword">this</span>.p.speed = <span class="number">300</span>;</div><div class="line">          <span class="keyword">this</span>.p.vyMult = <span class="number">1.5</span>;</div><div class="line">          <span class="keyword">var</span> temp = <span class="keyword">this</span>;</div><div class="line">          setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            temp.p.invincible = <span class="literal">false</span>;</div><div class="line">            temp.p.opacity = <span class="number">1</span>;</div><div class="line">            temp.p.speed = <span class="number">200</span>;</div><div class="line">            temp.p.vyMult = <span class="number">1</span>;</div><div class="line">          &#125;, <span class="number">3000</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line"> </div><div class="line">      <span class="keyword">this</span>.on(<span class="string">'join'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.p.invincible = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>.p.opacity = <span class="number">0.5</span>;</div><div class="line">        <span class="keyword">this</span>.p.speed = <span class="number">300</span>;</div><div class="line">        <span class="keyword">this</span>.p.vyMult = <span class="number">1.5</span>;</div><div class="line">        <span class="keyword">var</span> temp = <span class="keyword">this</span>;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          temp.p.invincible = <span class="literal">false</span>;</div><div class="line">          temp.p.opacity = <span class="number">1</span>;</div><div class="line">          temp.p.speed = <span class="number">200</span>;</div><div class="line">          temp.p.vyMult = <span class="number">1</span>;</div><div class="line">        &#125;, <span class="number">3000</span>);</div><div class="line">      &#125;);</div><div class="line">    &#125;,</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>Lines 4-7:</strong> Declare some default values for the <code>tagged, invincible, and vyMult</code> properties. We’ll use <code>tagged</code> to tell if a player is tagged or not, <code>invincible</code> to tell if a player is invincible, and <code>vyMult</code> as a variable to increase the y-velocity of a player.</p>
<p><strong>Line 11:</strong> Add some event listeners to our player when we instantiate our class.</p>
<p><strong>Lines 14-15:</strong> When a <code>hit</code> event is received, check if the player is tagged, the collision object is an Actor (since hit events are triggered on contact with walls too!), the collided player is not tagged, and finally that the collided player is not invincible.</p>
<p><strong>Line 16:</strong> Emit a socket.io event <code>tag</code> with the <code>playerId</code> of the collided player. This lets other players know which player was just tagged.</p>
<p><strong>Lines 17-22:</strong> Set the current player’s <code>tagged</code> state to false. Change their sprite back to a normal player. Give them temporary invincibility. Make them translucent to make it obvious to other players they’re invincible. Give them increased speed on the x-axis. Increase <code>vyMult</code> to 1.5 which also allows the player to move faster on the y-axis.</p>
<p><strong>Line 23:</strong> Set a temporary variable that we can call after a timeout to revert the invincibility and speed increases we gave the current player.</p>
<p><strong>Lines 25-28:</strong> Set the player’s invincible state to false. Reset their translucent state. Reset their x-speed and y-speed. This is all within a timeout function that executes after 3 seconds.</p>
<p><strong>Line 33-44:</strong> When the player first joins the game, we want to give them temporary invincibility and increased speed. This code is copy pasted from the <code>hit</code> event.</p>
<h2 id="Finishing-up-the-server-code"><a href="#Finishing-up-the-server-code" class="headerlink" title="Finishing up the server code"></a>Finishing up the server code</h2><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tagged = <span class="literal">false</span>;</div><div class="line"> </div><div class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">  playerCount++;</div><div class="line">  id++;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!tagged) &#123;</div><div class="line">      socket.emit(<span class="string">'connected'</span>, &#123; playerId: id, tagged: <span class="literal">true</span> &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      socket.emit(<span class="string">'connected'</span>, &#123; playerId: id &#125;);</div><div class="line">    &#125;</div><div class="line">    io.emit(<span class="string">'count'</span>, &#123; playerCount: playerCount &#125;);</div><div class="line">  &#125;, <span class="number">1500</span>);</div><div class="line">  </div><div class="line">  socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    playerCount--;</div><div class="line">    io.emit(<span class="string">'count'</span>, &#123; playerCount: playerCount &#125;);</div><div class="line">  &#125;);</div><div class="line">  </div><div class="line">  socket.on(<span class="string">'update'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (data[<span class="string">'tagged'</span>]) &#123;</div><div class="line">      tagged = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    socket.broadcast.emit(<span class="string">'updated'</span>, data);</div><div class="line">  &#125;);</div><div class="line">  </div><div class="line">  socket.on(<span class="string">'tag'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    io.emit(<span class="string">'tagged'</span>, data);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  tagged = <span class="literal">false</span>;</div><div class="line">&#125;, <span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p><strong>Line 1:</strong> Declare a boolean <code>tagged</code> variable that will be used to check if there are any taggers currently in the game.</p>
<p><strong>Line 7:</strong> If tagged is false, make the connected player a tagger.</p>
<p><strong>Line 9:</strong> Otherwise, simply add them to the game.</p>
<p><strong>Lines 20-22:</strong> If we receieve any data from a tagger, we can set tagged to true.</p>
<p><strong>Line 23:</strong> The reason we use a <code>socket.broadcast.emit</code> instead of an <code>io.emit</code> or <code>socket.emit</code> here is because <code>broadcast</code> will send the event to all sockets OTHER than the emitting socket. This makes sense for the update event because we don’t need the server telling us about where our own player is when our client is dealing with our player movement already.</p>
<p><strong>Lines 26-28:</strong> Server event for when a player is tagged.</p>
<p><strong>Lines 31-33:</strong> Every 3 seconds, set <code>tagged</code> to false so that if no tagger is emitting data after 3 seconds, the next connecting player should be made the tagger.</p>
<h2 id="Finishing-the-client-side-game-code"><a href="#Finishing-the-client-side-game-code" class="headerlink" title="Finishing the client side game code"></a>Finishing the client side game code</h2><p>Add these last updates to the game.js file</p>
<figure class="highlight javascript"><figcaption><span>game.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'socket.io/socket.io.js'</span>]);</div><div class="line"> </div><div class="line"><span class="keyword">var</span> players = [];</div><div class="line"><span class="keyword">var</span> socket = io.connect(<span class="string">'http://localhost:8080'</span>);</div><div class="line"><span class="keyword">var</span> UiPlayers = <span class="built_in">document</span>.getElementById(<span class="string">"players"</span>);</div><div class="line"><span class="keyword">var</span> selfId, player;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> objectFiles = [</div><div class="line">  <span class="string">'./src/player'</span></div><div class="line">];</div><div class="line"> </div><div class="line"><span class="built_in">require</span>(objectFiles, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setUp</span> (<span class="params">stage</span>) </span>&#123;</div><div class="line">    socket.on(<span class="string">'count'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      UiPlayers.innerHTML = <span class="string">'Players: '</span> + data[<span class="string">'playerCount'</span>];</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    socket.on(<span class="string">'connected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      selfId = data[<span class="string">'playerId'</span>];</div><div class="line">      <span class="keyword">if</span> (data[<span class="string">'tagged'</span>]) &#123;</div><div class="line">        player = <span class="keyword">new</span> Q.Player(&#123; playerId: selfId, x: <span class="number">100</span>, y: <span class="number">100</span>, socket: socket &#125;);</div><div class="line">        player.p.sheet = <span class="string">'enemy'</span></div><div class="line">        player.p.tagged = <span class="literal">true</span>;</div><div class="line">        stage.insert(player);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        player = <span class="keyword">new</span> Q.Player(&#123; playerId: selfId, x: <span class="number">100</span>, y: <span class="number">100</span>, socket: socket &#125;);</div><div class="line">        stage.insert(player);</div><div class="line">        player.trigger(<span class="string">'join'</span>);</div><div class="line">      &#125;</div><div class="line">      stage.add(<span class="string">'viewport'</span>).follow(player);</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    socket.on(<span class="string">'updated'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> actor = players.filter(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> obj.playerId == data[<span class="string">'playerId'</span>];</div><div class="line">      &#125;)[<span class="number">0</span>];</div><div class="line">      <span class="keyword">if</span> (actor) &#123;</div><div class="line">        actor.player.p.x = data[<span class="string">'x'</span>];</div><div class="line">        actor.player.p.y = data[<span class="string">'y'</span>];</div><div class="line">        actor.player.p.sheet = data[<span class="string">'sheet'</span>];</div><div class="line">        actor.player.p.opacity = data[<span class="string">'opacity'</span>];</div><div class="line">        actor.player.p.invincible = data[<span class="string">'invincible'</span>];</div><div class="line">        actor.player.p.tagged = data[<span class="string">'tagged'</span>];</div><div class="line">        actor.player.p.update = <span class="literal">true</span>;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> temp = <span class="keyword">new</span> Q.Actor(&#123; playerId: data[<span class="string">'playerId'</span>], x: data[<span class="string">'x'</span>], y: data[<span class="string">'y'</span>], sheet: data[<span class="string">'sheet'</span>], opacity: data[<span class="string">'opacity'</span>], invincible: data[<span class="string">'invincible'</span>], tagged: data[<span class="string">'tagged'</span>] &#125;);</div><div class="line">        players.push(&#123; player: temp, playerId: data[<span class="string">'playerId'</span>] &#125;);</div><div class="line">        stage.insert(temp);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    socket.on(<span class="string">'tagged'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (data[<span class="string">'playerId'</span>] == selfId) &#123;</div><div class="line">        player.p.sheet = <span class="string">'enemy'</span>;</div><div class="line">        player.p.tagged = <span class="literal">true</span>;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> actor = players.filter(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> obj.playerId == data[<span class="string">'playerId'</span>];</div><div class="line">        &#125;)[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span> (actor) &#123;</div><div class="line">          actor.player.p.sheet = <span class="string">'enemy'</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong>Line 3:</strong> On our client side we’ll store all of our other players in an array of Quintus player objects. This will make it easier to update all of the other players when we get information from the server.</p>
<p><strong>Line 4:</strong> Set our client socket to listen on port 8080.</p>
<p><strong>Line 6:</strong> Here we instantiate the vars <code>selfId</code> and <code>player</code>, which refer to the <code>playerId</code> and <code>Player</code> object of ourselves respectively.</p>
<p><strong>Lines 20-29:</strong> If our <code>connected</code> event is passed in with the <code>data[&#39;tagged&#39;]</code> object property (Look at the app.js we wrote above!), we’ll create a new <code>Player</code> and set it to a tagger. Otherwise, we’ll just create a new <code>Player</code>. Note that we set our <code>selfId</code> and <code>player</code> object to the <code>Player</code> created in this function, because the <code>connected</code> event is only emitted to our own client. This way we can separate the <code>Actor</code> and <code>Player</code> classes as we’ve talked about before and have our keys only control the <code>Player</code> class.</p>
<p><strong>Line 33:</strong> Have our socket listen for <code>updated</code> events, which we wrote above in our app.js code. As we saw from before, the <code>updated</code> event will be passed in with a data object filled with all the new properties of another player.</p>
<p><strong>Lines 34-36:</strong> Filter through our <code>players</code> array that we created before and find the one with the same <code>playerId</code> as that passed in by the data object. Since <code>filter</code> returns an array and we can assume it only has one <code>Actor</code>, we’ll just always grab the element at index 0.</p>
<p><strong>Lines 37-44:</strong> If our actor was found, we can just update all of its properties with that of the data object.</p>
<p><strong>Lines 45-48:</strong> If not, that means that they recently connected and we are just starting to receive update events from them, so we create a new <code>Actor</code> and push it into the <code>players</code> array.</p>
<p><strong>Line 52:</strong> Listen for <code>tagged</code> events, which will be emitted to the everyone in the game.</p>
<p><strong>Lines 53-55:</strong> If the player being tagged is ourselves, we’ll use our <code>player</code> reference to easily update our properties.</p>
<p><strong>Lines 56-62:</strong> Otherwise, we’ll filter through our <code>players</code> array like before and update the properties on the appropriate <code>Actor</code>.</p>
<h2 id="Finishing-up-and-deploying-on-your-server"><a href="#Finishing-up-and-deploying-on-your-server" class="headerlink" title="Finishing up and deploying on your server"></a>Finishing up and deploying on your server</h2><p>Now that you have everything working, it’s time to put this bad boy on the internet!</p>
<p>Once you have the IP of wherever your project will be hosted, you need to change this line of code on the client so that it can connect to our server.</p>
<figure class="highlight plain"><figcaption><span>game.js lang: javascript</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var socket = io.connect(&apos;http://104.131.190.55:8080&apos;);</div></pre></td></tr></table></figure>
<p>For this small project, I’m using <a href="https://www.digitalocean.com/" target="_blank" rel="external">Digital Ocean</a> to set up a game quickly. Just create a droplet and go into the console. We don’t need to install much, just node, npm package manager, and git if you aren’t going to do something like ssh/ftp your files over to your server directly.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install node</div><div class="line">$ sudo apt-get install npm</div></pre></td></tr></table></figure>
<p>Then switch into your www folder and create your project folder.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">$ git remote add origin (git url)</div><div class="line">$ git pull origin master</div><div class="line">$ nodejs app.js</div><div class="line">Multiplayer app listening on port 80</div></pre></td></tr></table></figure>
<p>Well, thanks for joining me on my first blog tutorial! I hope you had as much fun as I did learning Quintus &amp; Socket.io. Also, if at any point in my tutorials I don’t fully explain something or you found a better way to do something, by all means comment on my posts and let me know!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here’s a quick demo of our finished game:&lt;/p&gt;
&lt;iframe style=&quot;width:98%;&quot; height=&quot;500&quot; src=&quot;http://104.167.115.218:8080/&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;http://mliu95.github.io/2014/09/16/Creating-an-online-multiplayer-web-game-using-Socketio-and-Quintus-Part2&quot;&gt;Last post&lt;/a&gt;, I showed up how to set up basic Socketio interaction with Quintus to allow for multiple people to join a game of tag. Now, let’s work on the final part of our app, which is adding the code to let our players tag each other.&lt;/p&gt;
&lt;h2 id=&quot;Player-Class&quot;&gt;&lt;a href=&quot;#Player-Class&quot; class=&quot;headerlink&quot; title=&quot;Player Class&quot;&gt;&lt;/a&gt;Player Class&lt;/h2&gt;&lt;p&gt;Let’s add some properties and event listeners to our player class&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;player.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Q.Sprite.extend(&lt;span class=&quot;string&quot;&gt;&#39;Player&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    init: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;p&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._super(p, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sheet: &lt;span class=&quot;string&quot;&gt;&#39;player&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        tagged: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        invincible: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        vyMult: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.add(&lt;span class=&quot;string&quot;&gt;&#39;2d, platformerControls, animation&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.addEventListeners();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    addEventListeners: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.on(&lt;span class=&quot;string&quot;&gt;&#39;hit&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;collision&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.p.tagged &amp;amp;&amp;amp; collision.obj.isA(&lt;span class=&quot;string&quot;&gt;&#39;Actor&#39;&lt;/span&gt;) &amp;amp;&amp;amp; !collision.obj.p.tagged &amp;amp;&amp;amp; !collision.obj.p.invincible) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.p.socket.emit(&lt;span class=&quot;string&quot;&gt;&#39;tag&#39;&lt;/span&gt;, &amp;#123; playerId: collision.obj.p.playerId &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.p.tagged = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.p.sheet = &lt;span class=&quot;string&quot;&gt;&#39;player&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.p.invincible = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.p.opacity = &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.p.speed = &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.p.vyMult = &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            temp.p.invincible = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            temp.p.opacity = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            temp.p.speed = &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            temp.p.vyMult = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;, &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.on(&lt;span class=&quot;string&quot;&gt;&#39;join&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.p.invincible = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.p.opacity = &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.p.speed = &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.p.vyMult = &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          temp.p.invincible = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          temp.p.opacity = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          temp.p.speed = &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          temp.p.vyMult = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;, &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://mliu95.github.io/tags/Node-js/"/>
    
      <category term="Socket.io" scheme="http://mliu95.github.io/tags/Socket-io/"/>
    
      <category term="Quintus" scheme="http://mliu95.github.io/tags/Quintus/"/>
    
      <category term="Tutorial" scheme="http://mliu95.github.io/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Learning Unity</title>
    <link href="http://mliu95.github.io/2014/09/30/Learning-Unity/"/>
    <id>http://mliu95.github.io/2014/09/30/Learning-Unity/</id>
    <published>2014-09-30T16:25:41.000Z</published>
    <updated>2016-08-10T08:59:13.725Z</updated>
    
    <content type="html"><![CDATA[<p>For the past week I’ve been learning the Unity game engine and working on a simple ping pong game. I can see now why there’s so much praise for Unity—the tools are easy to pick up but very powerful, the documentation is thorough, and the potential for what you can make is practically limitless.</p>
<p>I tried experimenting with Unity’s built in physics to achieve the feel I wanted from the ball, but I ended up writing my own physics instead. </p>
<div class="video-container"><iframe src="//www.youtube.com/embed/aGn5-ytgByQ" frameborder="0" allowfullscreen></iframe></div> 
<p>I was playing around with letting the player move forward and backwards as well and Unity actually surprised me by doing this!</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/3U5n7eDDMGQ" frameborder="0" allowfullscreen></iframe></div>
<p>My goals for this project are to have a local two player game with certain powerups like faster hits, ball spins, etc. More to come!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For the past week I’ve been learning the Unity game engine and working on a simple ping pong game. I can see now why there’s so much prai
    
    </summary>
    
    
      <category term="Unity" scheme="http://mliu95.github.io/tags/Unity/"/>
    
      <category term="Ping ping" scheme="http://mliu95.github.io/tags/Ping-ping/"/>
    
      <category term="Progress" scheme="http://mliu95.github.io/tags/Progress/"/>
    
  </entry>
  
  <entry>
    <title>Developing on a Myo for MHacks</title>
    <link href="http://mliu95.github.io/2014/09/28/Developing-on-a-Myo-for-MHacks/"/>
    <id>http://mliu95.github.io/2014/09/28/Developing-on-a-Myo-for-MHacks/</id>
    <published>2014-09-28T18:26:20.000Z</published>
    <updated>2016-08-10T08:59:13.697Z</updated>
    
    <content type="html"><![CDATA[<p>Last week for the hackathon MHacks 2014 I was fortunate enough to snag a <a href="https://www.thalmic.com/en/myo/" target="_blank" rel="external">Myo by ThalmicLabs</a> to develop some cool hacks on. Check out the youtube videos below!</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/bU8y1CbwL-s" frameborder="0" allowfullscreen></iframe></div>  
<div class="video-container"><iframe src="//www.youtube.com/embed/d32xxLw_tP8" frameborder="0" allowfullscreen></iframe></div>
<h2 id="How-I-did-it"><a href="#How-I-did-it" class="headerlink" title="How I did it:"></a>How I did it:</h2><p>For Myo scripts you can use C++ or Lua scripts for Windows &amp; Mac applications, and Java for making Android apps. Writing Lua scripts and the android application was straightforward and relatively painless. There are event listeners given to you for each gesture and you have access to all rotational data from the Myo. It’s a very shallow API so the learning curve was very low.</p>
<a id="more"></a>
<p>The Myo Surgeon Simulator hack was pretty tricky to get right. Because the Myo only gives the rotational data and not the movement of the hand (as far as I know), I opted to move the game’s hand a certain direction whenever my rotation exceeded a certain margin away from the origin. I allowed the user to recalibrate where the origin was by listening for a particular gesture.</p>
<p>Since the Lua script allowed you to send keypresses but not mouse data, I ran a macro program that listened for certain key combinations and gave the mouse a certain acceleration as a result. These key combinations would be sent from my Lua script. I was stumped for an hour or two since mouse movement was working fine, but Surgeon Simulator wouldn’t recognize any movements. Turns out the game reads movement based on mouse acceleration and not mouse movement. A short googling and guess + test session yielded the correct macro.</p>
<p>The Myo can tell when you’re making a fist, but not when individual fingers are being bent. As a result, when I recognized the fist gesture, I had the Lua script press down all the necessary keys to make the game’s hand grab onto objects.</p>
<p>The Android application (apologies for the video quality!) let you map custom movements to a sound. By selecting a sound and performing a specific gesture to indicate the start of the motion, the app would begin storing all rotational information until the aforementioned gesture was made again. From then on, the user could perform a gesture and if it was within a certain threshold of error from the closest mapped motion, the sound associated with that motion was played.</p>
<p>While my data was being correctly stored and motions were being properly compared, the Myo would sometimes shift all of its rotation data. This could be caused by it moving around on my arm or quick jerking motions. The next improvement I would make to my application would be to reset the frame of reference for the rotation whenever the user wanted to perform a gesture. This would make up for any shifts from the original spot.</p>
<p>Overall I had a great time playing around with the Myo. It’s an awesome piece of technology and I’m excited to see what people can do with it. Perhaps it could be integrated with the plethora of wearable technology we’re seeing coming out?</p>
<p>(Note: I’ve included the links for the <a href="https://github.com/mliu95/myo-soundboard" target="_blank" rel="external">Myo Soundboard</a> and the <a href="https://github.com/mliu95/myo-surgeonsimulator" target="_blank" rel="external">Myo Surgeon Simulator</a>. Feel free to fork and pick up where I left off!)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Last week for the hackathon MHacks 2014 I was fortunate enough to snag a &lt;a href=&quot;https://www.thalmic.com/en/myo/&quot;&gt;Myo by ThalmicLabs&lt;/a&gt; to develop some cool hacks on. Check out the youtube videos below!&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/bU8y1CbwL-s&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;  
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/d32xxLw_tP8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;How-I-did-it&quot;&gt;&lt;a href=&quot;#How-I-did-it&quot; class=&quot;headerlink&quot; title=&quot;How I did it:&quot;&gt;&lt;/a&gt;How I did it:&lt;/h2&gt;&lt;p&gt;For Myo scripts you can use C++ or Lua scripts for Windows &amp;amp; Mac applications, and Java for making Android apps. Writing Lua scripts and the android application was straightforward and relatively painless. There are event listeners given to you for each gesture and you have access to all rotational data from the Myo. It’s a very shallow API so the learning curve was very low.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Myo" scheme="http://mliu95.github.io/tags/Myo/"/>
    
      <category term="MHacks" scheme="http://mliu95.github.io/tags/MHacks/"/>
    
      <category term="SurgeonSimulator" scheme="http://mliu95.github.io/tags/SurgeonSimulator/"/>
    
      <category term="Android" scheme="http://mliu95.github.io/tags/Android/"/>
    
      <category term="Wearable" scheme="http://mliu95.github.io/tags/Wearable/"/>
    
  </entry>
  
  <entry>
    <title>Creating an online multiplayer web game using Socket.io and Quintus Part 2</title>
    <link href="http://mliu95.github.io/2014/09/16/Creating-an-online-multiplayer-web-game-using-Socketio-and-Quintus-Part2/"/>
    <id>http://mliu95.github.io/2014/09/16/Creating-an-online-multiplayer-web-game-using-Socketio-and-Quintus-Part2/</id>
    <published>2014-09-16T21:55:48.000Z</published>
    <updated>2016-08-10T08:59:13.595Z</updated>
    
    <content type="html"><![CDATA[<p>In the <a href="http://mliu95.github.io/2014/07/13/Creating-an-online-multiplayer-web-game-using-Socketio-and-Quintus-Part1/#more">previous post</a>, I talked about how to set up Quintus and Node.js for a simple single player web game. Unfortunately, because we’re coding up a game of tag, keeping our game single player doesn’t make all that much sense.</p>
<h2 id="Socket-io"><a href="#Socket-io" class="headerlink" title="Socket.io"></a>Socket.io</h2><h3 id="Listening-for-connections-disconnects"><a href="#Listening-for-connections-disconnects" class="headerlink" title="Listening for connections/disconnects"></a>Listening for connections/disconnects</h3><p>We’ll write the code to monitor connections and disconnects on our server-side <code>app.js</code>:</p>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.render(<span class="string">'/index.html'</span>);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line"><span class="keyword">var</span> playerCount = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> id = <span class="number">0</span>;</div><div class="line"> </div><div class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">  playerCount++;</div><div class="line">  id++;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    socket.emit(<span class="string">'connected'</span>, &#123; playerId: id &#125;);</div><div class="line">    io.emit(<span class="string">'count'</span>, &#123; playerCount: playerCount &#125;);</div><div class="line">  &#125;, <span class="number">1500</span>);</div><div class="line"> </div><div class="line">  socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    playerCount--;</div><div class="line">    io.emit(<span class="string">'count'</span>, &#123; playerCount: playerCount &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">server.listen(<span class="number">80</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Multiplayer app listening on port 80"</span>);</div></pre></td></tr></table></figure>
<p><strong>Lines 6-7:</strong> Declaring variables that are used to track the number of players and assign a unique id for each player respectively.</p>
<p><strong>Lines 12-15:</strong> We wrap these socket emit events in a timeout because if a connection event was fired to the user right when they started connecting to the webpage, they wouldn’t have loaded the proper javascript files yet and the event wouldn’t do anything. A 1.5 second delay on connection gives a nice buffer time.</p>
<a id="more"></a>
<p><strong>Line 13:</strong> This event, as denoted by <code>socket.emit</code>, is only emitted to the user who connected. We can attach a javascript object as a second parameter which is accessible in the client javascript, so any data we want to send to the user from our server should be put here. In this case, we attach the unique id variable for this user.</p>
<p><strong>Line 14:</strong> We also emit an event to every single user (Including the one that just joined), which serves to update the player count in the game.</p>
<p><strong>Line 17-20:</strong> Here we handle the disconnect logic for the user, simply notifying all users of the app of the new player count.</p>
<h3 id="Adding-a-player-counter"><a href="#Adding-a-player-counter" class="headerlink" title="Adding a player counter"></a>Adding a player counter</h3><p>When a player connects, socket.io will emit a <code>count</code> event to all connected users, passing a javascript object with the count of players. Let’s create a counter in our webpage that will eventually update on player connect/disconnect.</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/quintus-all.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    .players &#123;</div><div class="line">      z-index: 5;</div><div class="line">      position: absolute;</div><div class="line">      padding-top: 10px;</div><div class="line">      padding-right: 10px;</div><div class="line">      right: 0;</div><div class="line">      text-align: right;</div><div class="line">      font-size: 1.5em;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"players"</span> <span class="attr">class</span>=<span class="string">"players"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/lib/require.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"src/game.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Lines 6-16:</strong> Set up some CSS styling for our player count span.</p>
<p><strong>Line 18:</strong> A span with id <code>players</code> that we’ll use to update the player count with.</p>
<h3 id="Adding-things-on-connect"><a href="#Adding-things-on-connect" class="headerlink" title="Adding things on connect!"></a>Adding things on connect!</h3><p>Let’s update our <code>game.js</code> file to add a <code>Player</code> when a socket.io <code>connected</code> event is received.</p>
<figure class="highlight javascript"><figcaption><span>game.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> players = [];</div><div class="line"><span class="keyword">var</span> socket = io.connect(<span class="string">'http://localhost:8080'</span>);</div><div class="line"><span class="keyword">var</span> UiPlayers = <span class="built_in">document</span>.getElementById(<span class="string">"players"</span>);</div><div class="line">...</div><div class="line">require(objectFiles, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setUp</span> (<span class="params">stage</span>) </span>&#123;</div><div class="line">    socket.on(<span class="string">'count'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      UiPlayers.innerHTML = <span class="string">'Players: '</span> + data[<span class="string">'playerCount'</span>];</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    socket.on(<span class="string">'connected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      selfId = data[<span class="string">'playerId'</span>];</div><div class="line">      player = <span class="keyword">new</span> Q.Player(&#123; playerId: selfId, x: <span class="number">100</span>, y: <span class="number">100</span>, socket: socket &#125;);</div><div class="line">      stage.insert(player);</div><div class="line">      stage.add(<span class="string">'viewport'</span>).follow(player);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  Q.scene(<span class="string">'arena'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">stage</span>) </span>&#123;</div><div class="line">    stage.collisionLayer(<span class="keyword">new</span> Q.TileLayer(&#123; dataAsset: <span class="string">'/maps/arena.json'</span>, sheet: <span class="string">'tiles'</span> &#125;));</div><div class="line"> </div><div class="line">    setUp(stage);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>Line 1:</strong> Instantiate an array <code>players</code> which will hold all of the <code>Player</code> objects currently in the game.</p>
<p><strong>Line 2:</strong> Create a <code>socket</code> object that connects with our server.</p>
<p><strong>Line 3:</strong> Declare the <code>UiPlayers</code> variable as the element with id <code>players</code> we added in <code>index.html</code> just now.</p>
<p><strong>Line 6:</strong> Declare a <code>setUp</code> function that oversees communication with socket.</p>
<p><strong>Lines 7-9:</strong> On a <code>count</code> event received from the server, we update the text of the <code>UiPlayers</code> variable to be the <code>playerCount</code> data passed in from the server.</p>
<p><strong>Line 12:</strong> Save the <code>playerId</code> the server assigned to us.</p>
<p><strong>Line 13:</strong> Create a new <code>Player</code> object with the properties we passed in. Notice we passed in the socket object declare before.</p>
<p><strong>Lines 14-15:</strong> Add our player to the stage and make the viewport follow the player. Notice we moved the logic for actually creating the player and making the viewport follow the player into the socket <code>connected</code> event.</p>
<p><strong>Line 22:</strong> Call the <code>setUp</code> function for our <code>stage</code>.</p>
<h3 id="Sending-information-back-to-the-server"><a href="#Sending-information-back-to-the-server" class="headerlink" title="Sending information back to the server"></a>Sending information back to the server</h3><p>In order for other people to see my player move, the server must send information about my player to them. In order to receive information about my player, the server needs to receive data from the client. Here’s how I do it:</p>
<figure class="highlight javascript"><figcaption><span>player.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">step: <span class="function"><span class="keyword">function</span> (<span class="params">dt</span>) </span>&#123;</div><div class="line">  ...</div><div class="line"> </div><div class="line">  this.p.socket.emit(<span class="string">'update'</span>, &#123; playerId: <span class="keyword">this</span>.p.playerId, x: <span class="keyword">this</span>.p.x, y: <span class="keyword">this</span>.p.y, sheet: <span class="keyword">this</span>.p.sheet &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Using the socket (we pass it into the player on creation) which we’ve saved as a property on our player, we emit a socket.io event called <code>update</code> to the server. The second parameter of the emit event contains a javascript object where we can tell the server things about our player like position, invincibility status, id of the player, etc.</p>
<h3 id="Receiving-updates-from-players"><a href="#Receiving-updates-from-players" class="headerlink" title="Receiving updates from players"></a>Receiving updates from players</h3><p>Now that our player emits a socket <code>update</code> event, we can take that data from our server and distribute it to all other players, so they can see where we move to. I added the following event listener to the server:</p>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">socket.on(<span class="string">'update'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  socket.broadcast.emit(<span class="string">'updated'</span>, data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Now we can write our client-side code to update the other players when we receive their <code>update</code> events. I start by creating a new <code>Actor</code> class for other players (Note: We can’t reuse the original <code>Player</code> class we wrote since every instance of the <code>Player</code> class is controllable through our keyboard and each instance of the <code>Player</code> sends the <code>update</code> socket event after every step).</p>
<p>Because the <code>Actor</code> class is small, I can just throw it in the <code>player.js</code> file.</p>
<figure class="highlight javascript"><figcaption><span>player.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Q.Sprite.extend(<span class="string">'Actor'</span>, &#123;</div><div class="line">  init: <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>._super(p, &#123;</div><div class="line">      update: <span class="literal">true</span></div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> temp = <span class="keyword">this</span>;</div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!temp.p.update) &#123;</div><div class="line">        temp.destroy();</div><div class="line">      &#125;</div><div class="line">      temp.p.update = <span class="literal">false</span>;</div><div class="line">    &#125;, <span class="number">3000</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Notice that save for the interval function, the Actor class has almost no properties set on instantiation or step. This is because we set them ourselves when we get an <code>update</code> event with all the necessary properties. This interval function destroys an <code>Actor</code> when it hasn’t received any update events for three seconds. Without it, if a person were to close out of our webgame the <code>Actors</code> would still persist.</p>
<p>Finally, we need to write some functionality that will take our <code>updated</code> event data from the socket server and update the corresponding actors. I placed the following in the <code>setUp</code> function:</p>
<figure class="highlight javascript"><figcaption><span>game.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> socket.on(<span class="string">'updated'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> actor = players.filter(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> obj.playerId == data[<span class="string">'playerId'</span>];</div><div class="line">  &#125;)[<span class="number">0</span>];</div><div class="line">  <span class="keyword">if</span> (actor) &#123;</div><div class="line">    actor.player.p.x = data[<span class="string">'x'</span>];</div><div class="line">    actor.player.p.y = data[<span class="string">'y'</span>];</div><div class="line">    actor.player.p.sheet = data[<span class="string">'sheet'</span>];</div><div class="line">    actor.player.p.update = <span class="literal">true</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> temp = <span class="keyword">new</span> Q.Actor(&#123; playerId: data[<span class="string">'playerId'</span>], x: data[<span class="string">'x'</span>], y: data[<span class="string">'y'</span>], sheet: data[<span class="string">'sheet'</span>] &#125;);</div><div class="line">    players.push(&#123; player: temp, playerId: data[<span class="string">'playerId'</span>] &#125;);</div><div class="line">    stage.insert(temp);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>Line 1:</strong> Declare our socket event listener for the <code>updated</code> event.</p>
<p><strong>Lines 2-4:</strong> Filter through our <code>players</code> array for any players with the same playerId as the one being updated.</p>
<p><strong>Lines 6-9:</strong> If we found a player in the <code>players</code> array then update their relevant properties.</p>
<p><strong>Lines 10-13:</strong> Else, we just create a new <code>Actor</code> class for that player, push it onto our <code>players</code> array, and insert it into the stage.</p>
<h3 id="Run-it"><a href="#Run-it" class="headerlink" title="Run it!"></a>Run it!</h3><p><img src="seeingdouble.png" alt="Whoa x 2!!!"></p>
<p>Run your node application once again. You’ll see that if you join your server from multiple tabs, there should be players popping up for them! Movement should be updating as well, although for certain browsers like Chrome you need to keep each tab in its own window (Javascript loses focus when it’s not the current tab, so it won’t be able to update if you’re focused on another game tab in the same window). Try getting a family/friend to join the same port and they should be able to run around with you!</p>
<p>In my <a href="http://mliu95.github.io/2014/11/14/Creating-an-online-multiplayer-web-game-using-Socketio-and-Quintus-Part3">next blog post</a>, I’ll show you how to get the tagging logic down. Keep an eye out!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the &lt;a href=&quot;http://mliu95.github.io/2014/07/13/Creating-an-online-multiplayer-web-game-using-Socketio-and-Quintus-Part1/#more&quot;&gt;previous post&lt;/a&gt;, I talked about how to set up Quintus and Node.js for a simple single player web game. Unfortunately, because we’re coding up a game of tag, keeping our game single player doesn’t make all that much sense.&lt;/p&gt;
&lt;h2 id=&quot;Socket-io&quot;&gt;&lt;a href=&quot;#Socket-io&quot; class=&quot;headerlink&quot; title=&quot;Socket.io&quot;&gt;&lt;/a&gt;Socket.io&lt;/h2&gt;&lt;h3 id=&quot;Listening-for-connections-disconnects&quot;&gt;&lt;a href=&quot;#Listening-for-connections-disconnects&quot; class=&quot;headerlink&quot; title=&quot;Listening for connections/disconnects&quot;&gt;&lt;/a&gt;Listening for connections/disconnects&lt;/h3&gt;&lt;p&gt;We’ll write the code to monitor connections and disconnects on our server-side &lt;code&gt;app.js&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;app.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  res.render(&lt;span class=&quot;string&quot;&gt;&#39;/index.html&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; playerCount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;io.on(&lt;span class=&quot;string&quot;&gt;&#39;connection&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;socket&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  playerCount++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  id++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    socket.emit(&lt;span class=&quot;string&quot;&gt;&#39;connected&#39;&lt;/span&gt;, &amp;#123; playerId: id &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    io.emit(&lt;span class=&quot;string&quot;&gt;&#39;count&#39;&lt;/span&gt;, &amp;#123; playerCount: playerCount &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;1500&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  socket.on(&lt;span class=&quot;string&quot;&gt;&#39;disconnect&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    playerCount--;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    io.emit(&lt;span class=&quot;string&quot;&gt;&#39;count&#39;&lt;/span&gt;, &amp;#123; playerCount: playerCount &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;server.listen(&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Multiplayer app listening on port 80&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Lines 6-7:&lt;/strong&gt; Declaring variables that are used to track the number of players and assign a unique id for each player respectively.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines 12-15:&lt;/strong&gt; We wrap these socket emit events in a timeout because if a connection event was fired to the user right when they started connecting to the webpage, they wouldn’t have loaded the proper javascript files yet and the event wouldn’t do anything. A 1.5 second delay on connection gives a nice buffer time.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://mliu95.github.io/tags/Node-js/"/>
    
      <category term="Socket.io" scheme="http://mliu95.github.io/tags/Socket-io/"/>
    
      <category term="Quintus" scheme="http://mliu95.github.io/tags/Quintus/"/>
    
      <category term="Tutorial" scheme="http://mliu95.github.io/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Creating an online multiplayer web game using Socket.io and Quintus Part 1</title>
    <link href="http://mliu95.github.io/2014/07/13/Creating-an-online-multiplayer-web-game-using-Socketio-and-Quintus-Part1/"/>
    <id>http://mliu95.github.io/2014/07/13/Creating-an-online-multiplayer-web-game-using-Socketio-and-Quintus-Part1/</id>
    <published>2014-07-13T18:17:56.000Z</published>
    <updated>2016-08-10T09:55:24.584Z</updated>
    
    <content type="html"><![CDATA[<p>One of my coworkers introduced me to <a href="http://html5quintus.com/" target="_blank" rel="external">Quintus</a>, a young Javascript engine that makes developing simple games a breeze. In this multipart tutorial I’ll be showing you how to combine Quintus with Socket.io to make a simple multiplayer game.</p>
<h2 id="Installation-and-setup"><a href="#Installation-and-setup" class="headerlink" title="Installation and setup"></a>Installation and setup</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>We’ll be using Node.js for our runtime environment. It’s super fast to pick up and start developing with, and works great for our multiplayer game. If you don’t yet have it installed, go to their <a href="http://nodejs.org/" target="_blank" rel="external">website for the installation link</a>.</p>
<h3 id="Getting-the-proper-node-modules"><a href="#Getting-the-proper-node-modules" class="headerlink" title="Getting the proper node modules"></a>Getting the proper node modules</h3><p>Now that we have Node.js installed, let’s create the folder where our game will be located.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir quintus-tag</div><div class="line">$ <span class="built_in">cd</span> quintus-tag</div></pre></td></tr></table></figure>
<p>Once inside, we’ll create a <code>package.json</code> file, which will hold information about our Node.js application.</p>
<figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"repository"</span>: &#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="attr">"url"</span>: <span class="string">"git@github.com:mliu95/quintus-tag.git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"quintus-tag"</span>,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"Michael Liu"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now to install express and socket.io, which will handle the routing/server and multiplayer respectively.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install --save express</div><div class="line">$ npm install --save socket.io</div></pre></td></tr></table></figure>
<p>By including the <code>--save</code> in our install calls, our <code>package.json</code> file will automatically update its <code>dependencies</code> object.</p>
<p>Now that we have our necessary modules, let’s set up our webserver with Express and Socket.io…</p>
<a id="more"></a>
<h2 id="Let’s-get-to-work"><a href="#Let’s-get-to-work" class="headerlink" title="Let’s get to work!"></a>Let’s get to work!</h2><h3 id="Setting-up-our-webserver"><a href="#Setting-up-our-webserver" class="headerlink" title="Setting up our webserver"></a>Setting up our webserver</h3><p>Create a file in your directory called <code>app.js</code>, and place this code inside.</p>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</div><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</div><div class="line"> </div><div class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>));</div><div class="line"> </div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.render(<span class="string">'/index.html'</span>);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">server.listen(<span class="number">80</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Multiplayer app listening on port 80"</span>);</div></pre></td></tr></table></figure>
<p>Let’s go through what this file does.</p>
<p><strong>Lines 1-4:</strong> Here we set up our Express server and also our Socket.io engine on top of that server.</p>
<p><strong>Line 6:</strong> I plan to include all of our application code inside of a <code>/public</code> directory, and instead of inserting <code>/public</code> in front of all my files/requires, I tell Express to use <code>/public</code> as the home directory</p>
<p><strong>Lines 8-10:</strong> Because our game’s going to be a single page application, our Express routing will be dead simple. In our case right now whenever we get a request to display whatever is on <code>localhost:80</code> (Which is also <code>localhost</code>), our app will serve up the <code>/public/index.html</code> page (Note that we don’t have to include <code>/public</code> because of our code in <strong>Line 6</strong>)</p>
<p><strong>Lines 12-13:</strong> Now we’ll tell our server to listen on port 80, and log a message to the console so we know everything is working just fine.</p>
<p>If we run our server now, we’re going to see an error page display complaining about an html module. That’s because we haven’t yet created our <code>/public</code> folder with the <code>index.html</code> file inside of it. Feel free to do it now, don’t worry about <code>index.html</code> being blank. If everything is working you should see a blank webpage! Soon enough, we’ll be turning this webpage into our Quintus game.</p>
<h3 id="Setting-up-Quintus"><a href="#Setting-up-Quintus" class="headerlink" title="Setting up Quintus"></a>Setting up Quintus</h3><p>Before we start, let’s import the javascript libraries we’ll be using.</p>
<p>In the public directory, create a <code>lib</code> folder which will hold the Quintus engine, RequireJS library, and any other libraries you might want to use in your games.</p>
<p><a href="http://cdn.html5quintus.com/v0.2.0/quintus-all.js" target="_blank" rel="external">Download the Quintus library file here and save it inside the lib folder</a></p>
<p><a href="http://requirejs.org/docs/release/2.1.14/minified/require.js" target="_blank" rel="external">Download the RequireJS library file here and save it inside the lib folder</a></p>
<p>Now, let’s go into our <code>index.html</code> file we created in the previous section and add some script tags to link to our future Quintus game.</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/quintus-all.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/lib/require.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"src/game.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Note: for anyone curious about the Socket.io script link, Socket.io will automatically intercept requests for <code>socket.io/socket.io.js</code> and send the appropriate response. <a href="http://stackoverflow.com/questions/8689877/cant-find-socket-io-js" target="_blank" rel="external">More info here.</a></p>
<p>Now let’s make a folder called <code>src</code> in our public directory and create a new javascript file called <code>game.js</code>. This file will house our Quintus engine and communicate with Socket.io.</p>
<figure class="highlight javascript"><figcaption><span>game.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Q = Quintus(&#123;audioSupported: [ <span class="string">'wav'</span>,<span class="string">'mp3'</span> ]&#125;)</div><div class="line">      .include(<span class="string">'Sprites, Scenes, Input, 2D, Anim, Touch, UI, Audio'</span>)</div><div class="line">      .setup(&#123; maximize: <span class="literal">true</span> &#125;)</div><div class="line">      .enableSound()</div><div class="line">      .controls().touch();</div><div class="line"> </div><div class="line">Q.gravityY = <span class="number">0</span>;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> objectFiles = [</div><div class="line">  <span class="string">'./src/player'</span></div><div class="line">];</div><div class="line"> </div><div class="line"><span class="built_in">require</span>(objectFiles, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  Q.scene(<span class="string">'arena'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">stage</span>) </span>&#123;</div><div class="line">    stage.collisionLayer(<span class="keyword">new</span> Q.TileLayer(&#123; dataAsset: <span class="string">'/maps/arena.json'</span>, sheet: <span class="string">'tiles'</span> &#125;));</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> player = stage.insert(<span class="keyword">new</span> Q.Player(&#123; x: <span class="number">100</span>, y: <span class="number">100</span> &#125;));</div><div class="line">    stage.add(<span class="string">'viewport'</span>).follow(player);</div><div class="line">  &#125;);</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> files = [</div><div class="line">    <span class="string">'/images/tiles.png'</span>,</div><div class="line">    <span class="string">'/maps/arena.json'</span>,</div><div class="line">    <span class="string">'/images/sprites.png'</span>,</div><div class="line">    <span class="string">'/images/sprites.json'</span></div><div class="line">  ];</div><div class="line"> </div><div class="line">  Q.load(files.join(<span class="string">','</span>), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    Q.sheet(<span class="string">'tiles'</span>, <span class="string">'/images/tiles.png'</span>, &#123; tilew: <span class="number">32</span>, tileh: <span class="number">32</span> &#125;);</div><div class="line">    Q.compileSheets(<span class="string">'/images/sprites.png'</span>, <span class="string">'/images/sprites.json'</span>);</div><div class="line">    Q.stageScene(<span class="string">'arena'</span>, <span class="number">0</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>Lines 1-5:</strong> Here we create our Quintus engine. For those curious on what other libraries there are or how this works, I recommend the <a href="http://html5quintus.com/guide/core.md#.U8bVQK1dVQ8" target="_blank" rel="external">Quintus documentation</a></p>
<p><strong>Line 7:</strong> Because we’re going to be making a top down style tag game, we need to disable gravity.</p>
<p><strong>Lines 9-11:</strong> Sourcing our custom Quintus classes that we’ll be using in the game.</p>
<p><strong>Line 14:</strong> Here we create our main game stage.</p>
<p><strong>Line 15:</strong> We use a built in Quintus function to create the walls of our game from a JSON object. <a href="arena.json">If you need a sample JSON object, here’s a download link</a></p>
<p><strong>Line 17:</strong> Creating a new Player class (Which we’ll be making later on in this post) and inserting it into the stage with initial coordinates (100, 100).</p>
<p><strong>Line 18:</strong> Telling our stage to center the view around the player class.</p>
<p><strong>Lines 21-26:</strong> Listing all of the assets we’ll need for our game.</p>
<p><strong>Lines 28-32:</strong> Here we tell the Quintus engine to load all of our spritesheets and create the <code>arena</code> scene we made earlier. I’ve included the download links for all of the images below:</p>
<p><a href="tiles.png">/images/tiles.png</a></p>
<p><a href="sprites.png">/images/sprites.png</a></p>
<p><a href="sprites.json">/images/sprites.json</a></p>
<h3 id="Creating-the-Player-class"><a href="#Creating-the-Player-class" class="headerlink" title="Creating the Player class"></a>Creating the Player class</h3><p>The last thing we’ll have to do to have a basic Quintus game is create our Player class. In your <code>src</code> folder create a javscript file called <code>Player.js</code>.</p>
<figure class="highlight javascript"><figcaption><span>player.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">  Q.Sprite.extend(<span class="string">'Player'</span>, &#123;</div><div class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>._super(p, &#123;</div><div class="line">        sheet: <span class="string">'player'</span></div><div class="line">      &#125;);</div><div class="line"> </div><div class="line">      <span class="keyword">this</span>.add(<span class="string">'2d, platformerControls, animation'</span>);</div><div class="line">    &#125;,</div><div class="line">    step: <span class="function"><span class="keyword">function</span> (<span class="params">dt</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (Q.inputs[<span class="string">'up'</span>]) &#123;</div><div class="line">        <span class="keyword">this</span>.p.vy = <span class="number">-200</span>;</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Q.inputs[<span class="string">'down'</span>]) &#123;</div><div class="line">        <span class="keyword">this</span>.p.vy = <span class="number">200</span>;</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!Q.inputs[<span class="string">'down'</span>] &amp;&amp; !Q.inputs[<span class="string">'up'</span>]) &#123;</div><div class="line">        <span class="keyword">this</span>.p.vy = <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>Line 2:</strong> Here we create a new class Player that extends the Q.Sprite class.</p>
<p><strong>Lines 3-6:</strong> The <code>init</code> function is called whenever we make a new Player class. Notice that we take a <code>p</code> parameter, which can be any Javascript object used to set specific properties (Like how we set the initial coordinates for the Player previously). We also can set variables like <code>sheet</code>, which defines what sprite our Player will be using, and saves us time from declaring it each time we make a new Player.</p>
<p><strong>Line 8:</strong> Here we add some built-in Quintus functionality to our Player class. The <code>2d</code> module let’s our class obey the law of physics and move around. The <code>platformerControls</code> module adds in basic support for moving left, right, and jumping (although we’ll be overriding the jumping later). Finally, the animation module will let us play different animations, which we’ll be using later to show the difference between the tagged players and the non-tagged players.</p>
<p><strong>Line 10:</strong> The <code>step</code> function is called by the Quintus engine to update the Player class, and which we’ll be using to add some basic functionality to our Player class.</p>
<p><strong>Lines 11-17:</strong> Since the <code>platformerControls</code> doesn’t fully work with our top down style game, we do it ourselves in the <code>step</code> function. Quintus by default provides <a href="http://html5quintus.com/guide/input.md#.U8fn661dVQ8" target="_blank" rel="external">mapping for the directional keys and more</a>, so we can simply look at if the <code>up</code> or <code>down</code> arrow is being pressed, and adjust the y-velocity property of the Player accordingly. (Note: Any properties of a class are stored within its <code>p</code> object).</p>
<p>And that’s all there is to it! Now let’s run our game server and see if it works:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> quintus-tag</div><div class="line">$ node app.js</div></pre></td></tr></table></figure>
<p>Then open up your web browser and go to <code>localhost:8080</code>. If everything’s working, you should see something like this:</p>
<p><img src="voila.png" alt="Whoa!"></p>
<p>Boom! Our player can move in all directions and collides with the walls. In the next part of this tutorial, we’ll start looking into integrating our Quintus game with Socket.io. <a href="http://mliu95.github.io/2014/09/16/Creating-an-online-multiplayer-web-game-using-Socketio-and-Quintus-Part2">Check it out here!</a> Thanks for reading!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of my coworkers introduced me to &lt;a href=&quot;http://html5quintus.com/&quot;&gt;Quintus&lt;/a&gt;, a young Javascript engine that makes developing simple games a breeze. In this multipart tutorial I’ll be showing you how to combine Quintus with Socket.io to make a simple multiplayer game.&lt;/p&gt;
&lt;h2 id=&quot;Installation-and-setup&quot;&gt;&lt;a href=&quot;#Installation-and-setup&quot; class=&quot;headerlink&quot; title=&quot;Installation and setup&quot;&gt;&lt;/a&gt;Installation and setup&lt;/h2&gt;&lt;h3 id=&quot;Node-js&quot;&gt;&lt;a href=&quot;#Node-js&quot; class=&quot;headerlink&quot; title=&quot;Node.js&quot;&gt;&lt;/a&gt;Node.js&lt;/h3&gt;&lt;p&gt;We’ll be using Node.js for our runtime environment. It’s super fast to pick up and start developing with, and works great for our multiplayer game. If you don’t yet have it installed, go to their &lt;a href=&quot;http://nodejs.org/&quot;&gt;website for the installation link&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Getting-the-proper-node-modules&quot;&gt;&lt;a href=&quot;#Getting-the-proper-node-modules&quot; class=&quot;headerlink&quot; title=&quot;Getting the proper node modules&quot;&gt;&lt;/a&gt;Getting the proper node modules&lt;/h3&gt;&lt;p&gt;Now that we have Node.js installed, let’s create the folder where our game will be located.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ mkdir quintus-tag&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; quintus-tag&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Once inside, we’ll create a &lt;code&gt;package.json&lt;/code&gt; file, which will hold information about our Node.js application.&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;figcaption&gt;&lt;span&gt;package.json&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;repository&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;git&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;git@github.com:mliu95/quintus-tag.git&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;quintus-tag&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Michael Liu&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now to install express and socket.io, which will handle the routing/server and multiplayer respectively.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install --save express&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install --save socket.io&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;By including the &lt;code&gt;--save&lt;/code&gt; in our install calls, our &lt;code&gt;package.json&lt;/code&gt; file will automatically update its &lt;code&gt;dependencies&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Now that we have our necessary modules, let’s set up our webserver with Express and Socket.io…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="http://mliu95.github.io/tags/Node-js/"/>
    
      <category term="Socket.io" scheme="http://mliu95.github.io/tags/Socket-io/"/>
    
      <category term="Quintus" scheme="http://mliu95.github.io/tags/Quintus/"/>
    
      <category term="Tutorial" scheme="http://mliu95.github.io/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Hello, World! It&#39;s Michael.</title>
    <link href="http://mliu95.github.io/2014/07/13/Hello,-World!/"/>
    <id>http://mliu95.github.io/2014/07/13/Hello,-World!/</id>
    <published>2014-07-13T14:40:57.000Z</published>
    <updated>2016-08-10T08:59:13.714Z</updated>
    
    <content type="html"><![CDATA[<p>This is my small piece of the internet, where I plan to write whatever I deem appropriate for a blog. I’m currently a rising sophomore at Virginia Tech studying computer science and business. I’ll keep this intro short, so come take a look around and let me know what you think!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is my small piece of the internet, where I plan to write whatever I deem appropriate for a blog. I’m currently a rising sophomore at
    
    </summary>
    
    
  </entry>
  
</feed>
